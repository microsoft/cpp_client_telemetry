//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : bondjson2cpp 2017.09.19.1
//   File : CsProtocol.json
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#pragma once
#include "BondConstTypes.hpp"

namespace bond_lite {

template<typename TReader>
bool Deserialize(TReader& reader, ::CsProtocol::Ingest& value, bool isBase)
{
    if (!reader.ReadStructBegin(isBase)) {
        return false;
    }

    uint8_t type;
    uint16_t id;
    for (;;) {
        if (!reader.ReadFieldBegin(type, id)) {
            return false;
        }

        if (type == BT_STOP || type == BT_STOP_BASE) {
            if (isBase != (type == BT_STOP_BASE)) {
                return false;
            }
            break;
        }

        switch (id) {
            case 1: {
                if (!reader.ReadInt64(value.time)) {
                    return false;
                }
                break;
            }

            case 2: {
                if (!reader.ReadString(value.clientIp)) {
                    return false;
                }
                break;
            }

            case 3: {
                if (!reader.ReadInt64(value.auth)) {
                    return false;
                }
                break;
            }

            case 4: {
                if (!reader.ReadInt64(value.quality)) {
                    return false;
                }
                break;
            }

            case 5: {
                if (!reader.ReadInt64(value.uploadTime)) {
                    return false;
                }
                break;
            }

            case 6: {
                if (!reader.ReadString(value.userAgent)) {
                    return false;
                }
                break;
            }

            case 7: {
                if (!reader.ReadString(value.client)) {
                    return false;
                }
                break;
            }

            default:
                return false;
        }

        if (!reader.ReadFieldEnd()) {
            return false;
        }
    }

    if (!reader.ReadStructEnd(isBase)) {
        return false;
    }

    return true;
}

template<typename TReader>
bool Deserialize(TReader& reader, ::CsProtocol::User& value, bool isBase)
{
    if (!reader.ReadStructBegin(isBase)) {
        return false;
    }

    uint8_t type;
    uint16_t id;
    for (;;) {
        if (!reader.ReadFieldBegin(type, id)) {
            return false;
        }

        if (type == BT_STOP || type == BT_STOP_BASE) {
            if (isBase != (type == BT_STOP_BASE)) {
                return false;
            }
            break;
        }

        switch (id) {
            case 1: {
                if (!reader.ReadString(value.id)) {
                    return false;
                }
                break;
            }

            case 2: {
                if (!reader.ReadString(value.localId)) {
                    return false;
                }
                break;
            }

            case 3: {
                if (!reader.ReadString(value.authId)) {
                    return false;
                }
                break;
            }

            case 4: {
                if (!reader.ReadString(value.locale)) {
                    return false;
                }
                break;
            }

            default:
                return false;
        }

        if (!reader.ReadFieldEnd()) {
            return false;
        }
    }

    if (!reader.ReadStructEnd(isBase)) {
        return false;
    }

    return true;
}

template<typename TReader>
bool Deserialize(TReader& reader, ::CsProtocol::Loc& value, bool isBase)
{
    if (!reader.ReadStructBegin(isBase)) {
        return false;
    }

    uint8_t type;
    uint16_t id;
    for (;;) {
        if (!reader.ReadFieldBegin(type, id)) {
            return false;
        }

        if (type == BT_STOP || type == BT_STOP_BASE) {
            if (isBase != (type == BT_STOP_BASE)) {
                return false;
            }
            break;
        }

        switch (id) {
            case 1: {
                if (!reader.ReadString(value.id)) {
                    return false;
                }
                break;
            }

            case 2: {
                if (!reader.ReadString(value.country)) {
                    return false;
                }
                break;
            }

            case 3: {
                if (!reader.ReadString(value.timezone)) {
                    return false;
                }
                break;
            }

            default:
                return false;
        }

        if (!reader.ReadFieldEnd()) {
            return false;
        }
    }

    if (!reader.ReadStructEnd(isBase)) {
        return false;
    }

    return true;
}

template<typename TReader>
bool Deserialize(TReader& reader, ::CsProtocol::Device& value, bool isBase)
{
    if (!reader.ReadStructBegin(isBase)) {
        return false;
    }

    uint8_t type;
    uint16_t id;
    for (;;) {
        if (!reader.ReadFieldBegin(type, id)) {
            return false;
        }

        if (type == BT_STOP || type == BT_STOP_BASE) {
            if (isBase != (type == BT_STOP_BASE)) {
                return false;
            }
            break;
        }

        switch (id) {
            case 1: {
                if (!reader.ReadString(value.id)) {
                    return false;
                }
                break;
            }

            case 2: {
                if (!reader.ReadString(value.localId)) {
                    return false;
                }
                break;
            }

            case 3: {
                if (!reader.ReadString(value.authId)) {
                    return false;
                }
                break;
            }

            case 4: {
                if (!reader.ReadString(value.authSecId)) {
                    return false;
                }
                break;
            }

            case 5: {
                if (!reader.ReadString(value.deviceClass)) {
                    return false;
                }
                break;
            }

            case 6: {
                if (!reader.ReadString(value.orgId)) {
                    return false;
                }
                break;
            }

            case 7: {
                if (!reader.ReadString(value.orgAuthId)) {
                    return false;
                }
                break;
            }

            case 8: {
                if (!reader.ReadString(value.make)) {
                    return false;
                }
                break;
            }

            case 9: {
                if (!reader.ReadString(value.model)) {
                    return false;
                }
                break;
            }

            case 10: {
                if (!reader.ReadString(value.authIdEnt)) {
                    return false;
                }
                break;
            }

            default:
                return false;
        }

        if (!reader.ReadFieldEnd()) {
            return false;
        }
    }

    if (!reader.ReadStructEnd(isBase)) {
        return false;
    }

    return true;
}

template<typename TReader>
bool Deserialize(TReader& reader, ::CsProtocol::Os& value, bool isBase)
{
    if (!reader.ReadStructBegin(isBase)) {
        return false;
    }

    uint8_t type;
    uint16_t id;
    for (;;) {
        if (!reader.ReadFieldBegin(type, id)) {
            return false;
        }

        if (type == BT_STOP || type == BT_STOP_BASE) {
            if (isBase != (type == BT_STOP_BASE)) {
                return false;
            }
            break;
        }

        switch (id) {
            case 1: {
                if (!reader.ReadString(value.locale)) {
                    return false;
                }
                break;
            }

            case 2: {
                if (!reader.ReadString(value.expId)) {
                    return false;
                }
                break;
            }

            case 3: {
                if (!reader.ReadInt32(value.bootId)) {
                    return false;
                }
                break;
            }

            case 4: {
                if (!reader.ReadString(value.name)) {
                    return false;
                }
                break;
            }

            case 5: {
                if (!reader.ReadString(value.ver)) {
                    return false;
                }
                break;
            }

            default:
                return false;
        }

        if (!reader.ReadFieldEnd()) {
            return false;
        }
    }

    if (!reader.ReadStructEnd(isBase)) {
        return false;
    }

    return true;
}

template<typename TReader>
bool Deserialize(TReader& reader, ::CsProtocol::App& value, bool isBase)
{
    if (!reader.ReadStructBegin(isBase)) {
        return false;
    }

    uint8_t type;
    uint16_t id;
    for (;;) {
        if (!reader.ReadFieldBegin(type, id)) {
            return false;
        }

        if (type == BT_STOP || type == BT_STOP_BASE) {
            if (isBase != (type == BT_STOP_BASE)) {
                return false;
            }
            break;
        }

        switch (id) {
            case 1: {
                if (!reader.ReadString(value.expId)) {
                    return false;
                }
                break;
            }

            case 2: {
                if (!reader.ReadString(value.userId)) {
                    return false;
                }
                break;
            }

            case 3: {
                if (!reader.ReadString(value.env)) {
                    return false;
                }
                break;
            }

            case 4: {
                if (!reader.ReadInt32(value.asId)) {
                    return false;
                }
                break;
            }

            case 5: {
                if (!reader.ReadString(value.id)) {
                    return false;
                }
                break;
            }

            case 6: {
                if (!reader.ReadString(value.ver)) {
                    return false;
                }
                break;
            }

            case 7: {
                if (!reader.ReadString(value.locale)) {
                    return false;
                }
                break;
            }

            case 8: {
                if (!reader.ReadString(value.name)) {
                    return false;
                }
                break;
            }

            case 9: {
                if (!reader.ReadString(value.sesId)) {
                    return false;
                }
                break;
            }

            default:
                return false;
        }

        if (!reader.ReadFieldEnd()) {
            return false;
        }
    }

    if (!reader.ReadStructEnd(isBase)) {
        return false;
    }

    return true;
}

template<typename TReader>
bool Deserialize(TReader& reader, ::CsProtocol::Utc& value, bool isBase)
{
    if (!reader.ReadStructBegin(isBase)) {
        return false;
    }

    uint8_t type;
    uint16_t id;
    for (;;) {
        if (!reader.ReadFieldBegin(type, id)) {
            return false;
        }

        if (type == BT_STOP || type == BT_STOP_BASE) {
            if (isBase != (type == BT_STOP_BASE)) {
                return false;
            }
            break;
        }

        switch (id) {
            case 1: {
                if (!reader.ReadString(value.stId)) {
                    return false;
                }
                break;
            }

            case 2: {
                if (!reader.ReadString(value.aId)) {
                    return false;
                }
                break;
            }

            case 3: {
                if (!reader.ReadString(value.raId)) {
                    return false;
                }
                break;
            }

            case 4: {
                if (!reader.ReadString(value.op)) {
                    return false;
                }
                break;
            }

            case 5: {
                if (!reader.ReadInt64(value.cat)) {
                    return false;
                }
                break;
            }

            case 6: {
                if (!reader.ReadInt64(value.flags)) {
                    return false;
                }
                break;
            }

            case 7: {
                if (!reader.ReadString(value.sqmId)) {
                    return false;
                }
                break;
            }

            case 9: {
                if (!reader.ReadString(value.mon)) {
                    return false;
                }
                break;
            }

            case 10: {
                if (!reader.ReadInt32(value.cpId)) {
                    return false;
                }
                break;
            }

            case 11: {
                if (!reader.ReadString(value.bSeq)) {
                    return false;
                }
                break;
            }

            case 12: {
                if (!reader.ReadString(value.epoch)) {
                    return false;
                }
                break;
            }

            case 13: {
                if (!reader.ReadInt64(value.seq)) {
                    return false;
                }
                break;
            }

            case 14: {
                if (!reader.ReadDouble(value.popSample)) {
                    return false;
                }
                break;
            }

            case 15: {
                if (!reader.ReadInt64(value.eventFlags)) {
                    return false;
                }
                break;
            }

            case 16: {
                if (!reader.ReadInt64(value.wsId)) {
                    return false;
                }
                break;
            }

            case 17: {
                if (!reader.ReadInt64(value.wcmp)) {
                    return false;
                }
                break;
            }

            case 18: {
                if (!reader.ReadInt64(value.wPId)) {
                    return false;
                }
                break;
            }

            default:
                return false;
        }

        if (!reader.ReadFieldEnd()) {
            return false;
        }
    }

    if (!reader.ReadStructEnd(isBase)) {
        return false;
    }

    return true;
}

template<typename TReader>
bool Deserialize(TReader& reader, ::CsProtocol::M365a& value, bool isBase)
{
    if (!reader.ReadStructBegin(isBase)) {
        return false;
    }

    uint8_t type;
    uint16_t id;
    for (;;) {
        if (!reader.ReadFieldBegin(type, id)) {
            return false;
        }

        if (type == BT_STOP || type == BT_STOP_BASE) {
            if (isBase != (type == BT_STOP_BASE)) {
                return false;
            }
            break;
        }

        switch (id) {
            case 1: {
                if (!reader.ReadString(value.enrolledTenantId)) {
                    return false;
                }
                break;
            }

            case 2: {
                if (!reader.ReadUInt64(value.msp)) {
                    return false;
                }
                break;
            }

            default:
                return false;
        }

        if (!reader.ReadFieldEnd()) {
            return false;
        }
    }

    if (!reader.ReadStructEnd(isBase)) {
        return false;
    }

    return true;
}

template<typename TReader>
bool Deserialize(TReader& reader, ::CsProtocol::Xbl& value, bool isBase)
{
    if (!reader.ReadStructBegin(isBase)) {
        return false;
    }

    uint8_t type;
    uint16_t id;
    for (;;) {
        if (!reader.ReadFieldBegin(type, id)) {
            return false;
        }

        if (type == BT_STOP || type == BT_STOP_BASE) {
            if (isBase != (type == BT_STOP_BASE)) {
                return false;
            }
            break;
        }

        switch (id) {
            case 5: {
                uint32_t size4;
                uint8_t keyType4, valueType4;
                if (!reader.ReadMapContainerBegin(size4, keyType4, valueType4)) {
                    return false;
                }
                if (keyType4 != BT_STRING || valueType4 != BT_STRING) {
                    return false;
                }
                for (unsigned i4 = 0; i4 < size4; i4++) {
                    std::string key4;
                    if (!reader.ReadString(key4)) {
                        return false;
                    }
                    if (!reader.ReadString(value.claims[key4])) {
                        return false;
                    }
                }
                if (!reader.ReadContainerEnd()) {
                    return false;
                }
                break;
            }

            case 10: {
                if (!reader.ReadString(value.nbf)) {
                    return false;
                }
                break;
            }

            case 20: {
                if (!reader.ReadString(value.exp)) {
                    return false;
                }
                break;
            }

            case 30: {
                if (!reader.ReadString(value.sbx)) {
                    return false;
                }
                break;
            }

            case 40: {
                if (!reader.ReadString(value.dty)) {
                    return false;
                }
                break;
            }

            case 50: {
                if (!reader.ReadString(value.did)) {
                    return false;
                }
                break;
            }

            case 60: {
                if (!reader.ReadString(value.xid)) {
                    return false;
                }
                break;
            }

            case 70: {
                if (!reader.ReadUInt64(value.uts)) {
                    return false;
                }
                break;
            }

            case 80: {
                if (!reader.ReadString(value.pid)) {
                    return false;
                }
                break;
            }

            case 90: {
                if (!reader.ReadString(value.dvr)) {
                    return false;
                }
                break;
            }

            case 100: {
                if (!reader.ReadUInt32(value.tid)) {
                    return false;
                }
                break;
            }

            case 110: {
                if (!reader.ReadString(value.tvr)) {
                    return false;
                }
                break;
            }

            case 120: {
                if (!reader.ReadString(value.sty)) {
                    return false;
                }
                break;
            }

            case 130: {
                if (!reader.ReadString(value.sid)) {
                    return false;
                }
                break;
            }

            case 140: {
                if (!reader.ReadInt64(value.eid)) {
                    return false;
                }
                break;
            }

            case 150: {
                if (!reader.ReadString(value.ip)) {
                    return false;
                }
                break;
            }

            default:
                return false;
        }

        if (!reader.ReadFieldEnd()) {
            return false;
        }
    }

    if (!reader.ReadStructEnd(isBase)) {
        return false;
    }

    return true;
}

template<typename TReader>
bool Deserialize(TReader& reader, ::CsProtocol::Javascript& value, bool isBase)
{
    if (!reader.ReadStructBegin(isBase)) {
        return false;
    }

    uint8_t type;
    uint16_t id;
    for (;;) {
        if (!reader.ReadFieldBegin(type, id)) {
            return false;
        }

        if (type == BT_STOP || type == BT_STOP_BASE) {
            if (isBase != (type == BT_STOP_BASE)) {
                return false;
            }
            break;
        }

        switch (id) {
            case 10: {
                if (!reader.ReadString(value.libVer)) {
                    return false;
                }
                break;
            }

            case 15: {
                if (!reader.ReadString(value.osName)) {
                    return false;
                }
                break;
            }

            case 20: {
                if (!reader.ReadString(value.browser)) {
                    return false;
                }
                break;
            }

            case 21: {
                if (!reader.ReadString(value.browserVersion)) {
                    return false;
                }
                break;
            }

            case 25: {
                if (!reader.ReadString(value.platform)) {
                    return false;
                }
                break;
            }

            case 30: {
                if (!reader.ReadString(value.make)) {
                    return false;
                }
                break;
            }

            case 35: {
                if (!reader.ReadString(value.model)) {
                    return false;
                }
                break;
            }

            case 40: {
                if (!reader.ReadString(value.screenSize)) {
                    return false;
                }
                break;
            }

            case 45: {
                if (!reader.ReadString(value.msfpc)) {
                    return false;
                }
                break;
            }

            case 50: {
                if (!reader.ReadString(value.mc1Id)) {
                    return false;
                }
                break;
            }

            case 60: {
                if (!reader.ReadUInt64(value.mc1Lu)) {
                    return false;
                }
                break;
            }

            case 70: {
                if (!reader.ReadBool(value.isMc1New)) {
                    return false;
                }
                break;
            }

            case 80: {
                if (!reader.ReadString(value.ms0)) {
                    return false;
                }
                break;
            }

            case 90: {
                if (!reader.ReadString(value.anid)) {
                    return false;
                }
                break;
            }

            case 100: {
                if (!reader.ReadString(value.a)) {
                    return false;
                }
                break;
            }

            case 110: {
                if (!reader.ReadString(value.msResearch)) {
                    return false;
                }
                break;
            }

            case 120: {
                if (!reader.ReadString(value.csrvc)) {
                    return false;
                }
                break;
            }

            case 130: {
                if (!reader.ReadString(value.rtCell)) {
                    return false;
                }
                break;
            }

            case 140: {
                if (!reader.ReadString(value.rtEndAction)) {
                    return false;
                }
                break;
            }

            case 150: {
                if (!reader.ReadString(value.rtPermId)) {
                    return false;
                }
                break;
            }

            case 160: {
                if (!reader.ReadString(value.r)) {
                    return false;
                }
                break;
            }

            case 170: {
                if (!reader.ReadString(value.wtFpc)) {
                    return false;
                }
                break;
            }

            case 180: {
                if (!reader.ReadString(value.omniId)) {
                    return false;
                }
                break;
            }

            case 190: {
                if (!reader.ReadString(value.gsfxSession)) {
                    return false;
                }
                break;
            }

            case 200: {
                if (!reader.ReadString(value.domain)) {
                    return false;
                }
                break;
            }

            case 210: {
                if (!reader.ReadBool(value.userConsent)) {
                    return false;
                }
                break;
            }

            case 220: {
                if (!reader.ReadString(value.browserLang)) {
                    return false;
                }
                break;
            }

            case 230: {
                if (!reader.ReadString(value.serviceName)) {
                    return false;
                }
                break;
            }

            case 999: {
                if (!reader.ReadString(value.dnt)) {
                    return false;
                }
                break;
            }

            default:
                return false;
        }

        if (!reader.ReadFieldEnd()) {
            return false;
        }
    }

    if (!reader.ReadStructEnd(isBase)) {
        return false;
    }

    return true;
}

template<typename TReader>
bool Deserialize(TReader& reader, ::CsProtocol::Protocol& value, bool isBase)
{
    if (!reader.ReadStructBegin(isBase)) {
        return false;
    }

    uint8_t type;
    uint16_t id;
    for (;;) {
        if (!reader.ReadFieldBegin(type, id)) {
            return false;
        }

        if (type == BT_STOP || type == BT_STOP_BASE) {
            if (isBase != (type == BT_STOP_BASE)) {
                return false;
            }
            break;
        }

        switch (id) {
            case 1: {
                if (!reader.ReadInt32(value.metadataCrc)) {
                    return false;
                }
                break;
            }

            case 2: {
                uint32_t size4;
                uint8_t type4;
                if (!reader.ReadContainerBegin(size4, type4)) {
                    return false;
                }
                if (type4 != BT_LIST) {
                    return false;
                }
                value.ticketKeys.resize(size4);
                for (unsigned i4 = 0; i4 < size4; i4++) {
                    uint32_t size5;
                    uint8_t type5;
                    if (!reader.ReadContainerBegin(size5, type5)) {
                        return false;
                    }
                    if (type5 != BT_STRING) {
                        return false;
                    }
                    value.ticketKeys[i4].resize(size5);
                    for (unsigned i5 = 0; i5 < size5; i5++) {
                        if (!reader.ReadString(value.ticketKeys[i4][i5])) {
                            return false;
                        }
                    }
                    if (!reader.ReadContainerEnd()) {
                        return false;
                    }
                }
                if (!reader.ReadContainerEnd()) {
                    return false;
                }
                break;
            }

            case 3: {
                if (!reader.ReadString(value.devMake)) {
                    return false;
                }
                break;
            }

            case 4: {
                if (!reader.ReadString(value.devModel)) {
                    return false;
                }
                break;
            }

            case 5: {
                if (!reader.ReadUInt64(value.msp)) {
                    return false;
                }
                break;
            }

            default:
                return false;
        }

        if (!reader.ReadFieldEnd()) {
            return false;
        }
    }

    if (!reader.ReadStructEnd(isBase)) {
        return false;
    }

    return true;
}

template<typename TReader>
bool Deserialize(TReader& reader, ::CsProtocol::Receipts& value, bool isBase)
{
    if (!reader.ReadStructBegin(isBase)) {
        return false;
    }

    uint8_t type;
    uint16_t id;
    for (;;) {
        if (!reader.ReadFieldBegin(type, id)) {
            return false;
        }

        if (type == BT_STOP || type == BT_STOP_BASE) {
            if (isBase != (type == BT_STOP_BASE)) {
                return false;
            }
            break;
        }

        switch (id) {
            case 1: {
                if (!reader.ReadInt64(value.originalTime)) {
                    return false;
                }
                break;
            }

            case 2: {
                if (!reader.ReadInt64(value.uploadTime)) {
                    return false;
                }
                break;
            }

            case 3: {
                if (!reader.ReadString(value.originalName)) {
                    return false;
                }
                break;
            }

            case 4: {
                if (!reader.ReadUInt64(value.flags)) {
                    return false;
                }
                break;
            }

            default:
                return false;
        }

        if (!reader.ReadFieldEnd()) {
            return false;
        }
    }

    if (!reader.ReadStructEnd(isBase)) {
        return false;
    }

    return true;
}

template<typename TReader>
bool Deserialize(TReader& reader, ::CsProtocol::Net& value, bool isBase)
{
    if (!reader.ReadStructBegin(isBase)) {
        return false;
    }

    uint8_t type;
    uint16_t id;
    for (;;) {
        if (!reader.ReadFieldBegin(type, id)) {
            return false;
        }

        if (type == BT_STOP || type == BT_STOP_BASE) {
            if (isBase != (type == BT_STOP_BASE)) {
                return false;
            }
            break;
        }

        switch (id) {
            case 1: {
                if (!reader.ReadString(value.provider)) {
                    return false;
                }
                break;
            }

            case 2: {
                if (!reader.ReadString(value.cost)) {
                    return false;
                }
                break;
            }

            case 3: {
                if (!reader.ReadString(value.type)) {
                    return false;
                }
                break;
            }

            default:
                return false;
        }

        if (!reader.ReadFieldEnd()) {
            return false;
        }
    }

    if (!reader.ReadStructEnd(isBase)) {
        return false;
    }

    return true;
}

template<typename TReader>
bool Deserialize(TReader& reader, ::CsProtocol::Sdk& value, bool isBase)
{
    if (!reader.ReadStructBegin(isBase)) {
        return false;
    }

    uint8_t type;
    uint16_t id;
    for (;;) {
        if (!reader.ReadFieldBegin(type, id)) {
            return false;
        }

        if (type == BT_STOP || type == BT_STOP_BASE) {
            if (isBase != (type == BT_STOP_BASE)) {
                return false;
            }
            break;
        }

        switch (id) {
            case 1: {
                if (!reader.ReadString(value.ver)) {
                    return false;
                }
                break;
            }

            case 2: {
                if (!reader.ReadString(value.epoch)) {
                    return false;
                }
                break;
            }

            case 3: {
                if (!reader.ReadInt64(value.seq)) {
                    return false;
                }
                break;
            }

            case 4: {
                if (!reader.ReadString(value.installId)) {
                    return false;
                }
                break;
            }

            case 5: {
                if (!reader.ReadString(value.libVer)) {
                    return false;
                }
                break;
            }

            default:
                return false;
        }

        if (!reader.ReadFieldEnd()) {
            return false;
        }
    }

    if (!reader.ReadStructEnd(isBase)) {
        return false;
    }

    return true;
}

template<typename TReader>
bool Deserialize(TReader& reader, ::CsProtocol::Cloud& value, bool isBase)
{
    if (!reader.ReadStructBegin(isBase)) {
        return false;
    }

    uint8_t type;
    uint16_t id;
    for (;;) {
        if (!reader.ReadFieldBegin(type, id)) {
            return false;
        }

        if (type == BT_STOP || type == BT_STOP_BASE) {
            if (isBase != (type == BT_STOP_BASE)) {
                return false;
            }
            break;
        }

        switch (id) {
            case 1: {
                if (!reader.ReadString(value.fullEnvName)) {
                    return false;
                }
                break;
            }

            case 2: {
                if (!reader.ReadString(value.location)) {
                    return false;
                }
                break;
            }

            case 3: {
                if (!reader.ReadString(value.environment)) {
                    return false;
                }
                break;
            }

            case 4: {
                if (!reader.ReadString(value.deploymentUnit)) {
                    return false;
                }
                break;
            }

            case 5: {
                if (!reader.ReadString(value.name)) {
                    return false;
                }
                break;
            }

            case 6: {
                if (!reader.ReadString(value.roleInstance)) {
                    return false;
                }
                break;
            }

            case 7: {
                if (!reader.ReadString(value.role)) {
                    return false;
                }
                break;
            }

            default:
                return false;
        }

        if (!reader.ReadFieldEnd()) {
            return false;
        }
    }

    if (!reader.ReadStructEnd(isBase)) {
        return false;
    }

    return true;
}

template<typename TReader>
bool Deserialize(TReader& reader, ::CsProtocol::Service& value, bool isBase)
{
    if (!reader.ReadStructBegin(isBase)) {
        return false;
    }

    uint8_t type;
    uint16_t id;
    for (;;) {
        if (!reader.ReadFieldBegin(type, id)) {
            return false;
        }

        if (type == BT_STOP || type == BT_STOP_BASE) {
            if (isBase != (type == BT_STOP_BASE)) {
                return false;
            }
            break;
        }

        switch (id) {
            case 1: {
                if (!reader.ReadString(value.name)) {
                    return false;
                }
                break;
            }

            case 2: {
                if (!reader.ReadString(value.role)) {
                    return false;
                }
                break;
            }

            case 3: {
                if (!reader.ReadString(value.roleVersion)) {
                    return false;
                }
                break;
            }

            default:
                return false;
        }

        if (!reader.ReadFieldEnd()) {
            return false;
        }
    }

    if (!reader.ReadStructEnd(isBase)) {
        return false;
    }

    return true;
}

template<typename TReader>
bool Deserialize(TReader& reader, ::CsProtocol::Cs& value, bool isBase)
{
    if (!reader.ReadStructBegin(isBase)) {
        return false;
    }

    uint8_t type;
    uint16_t id;
    for (;;) {
        if (!reader.ReadFieldBegin(type, id)) {
            return false;
        }

        if (type == BT_STOP || type == BT_STOP_BASE) {
            if (isBase != (type == BT_STOP_BASE)) {
                return false;
            }
            break;
        }

        switch (id) {
            case 1: {
                if (!reader.ReadString(value.sig)) {
                    return false;
                }
                break;
            }

            default:
                return false;
        }

        if (!reader.ReadFieldEnd()) {
            return false;
        }
    }

    if (!reader.ReadStructEnd(isBase)) {
        return false;
    }

    return true;
}

template<typename TReader>
bool Deserialize(TReader& reader, ::CsProtocol::Mscv& value, bool isBase)
{
    if (!reader.ReadStructBegin(isBase)) {
        return false;
    }

    uint8_t type;
    uint16_t id;
    for (;;) {
        if (!reader.ReadFieldBegin(type, id)) {
            return false;
        }

        if (type == BT_STOP || type == BT_STOP_BASE) {
            if (isBase != (type == BT_STOP_BASE)) {
                return false;
            }
            break;
        }

        switch (id) {
            case 1: {
                if (!reader.ReadString(value.cV)) {
                    return false;
                }
                break;
            }

            default:
                return false;
        }

        if (!reader.ReadFieldEnd()) {
            return false;
        }
    }

    if (!reader.ReadStructEnd(isBase)) {
        return false;
    }

    return true;
}

template<typename TReader>
bool Deserialize(TReader& reader, ::CsProtocol::IntWeb& value, bool isBase)
{
    if (!reader.ReadStructBegin(isBase)) {
        return false;
    }

    uint8_t type;
    uint16_t id;
    for (;;) {
        if (!reader.ReadFieldBegin(type, id)) {
            return false;
        }

        if (type == BT_STOP || type == BT_STOP_BASE) {
            if (isBase != (type == BT_STOP_BASE)) {
                return false;
            }
            break;
        }

        switch (id) {
            case 1: {
                if (!reader.ReadString(value.mc1Id)) {
                    return false;
                }
                break;
            }

            case 2: {
                if (!reader.ReadString(value.msfpc)) {
                    return false;
                }
                break;
            }

            case 3: {
                if (!reader.ReadString(value.anid)) {
                    return false;
                }
                break;
            }

            case 4: {
                if (!reader.ReadString(value.serviceName)) {
                    return false;
                }
                break;
            }

            case 5: {
                uint32_t size4;
                uint8_t keyType4, valueType4;
                if (!reader.ReadMapContainerBegin(size4, keyType4, valueType4)) {
                    return false;
                }
                if (keyType4 != BT_STRING || valueType4 != BT_STRING) {
                    return false;
                }
                for (unsigned i4 = 0; i4 < size4; i4++) {
                    std::string key4;
                    if (!reader.ReadString(key4)) {
                        return false;
                    }
                    if (!reader.ReadString(value.mscom[key4])) {
                        return false;
                    }
                }
                if (!reader.ReadContainerEnd()) {
                    return false;
                }
                break;
            }

            default:
                return false;
        }

        if (!reader.ReadFieldEnd()) {
            return false;
        }
    }

    if (!reader.ReadStructEnd(isBase)) {
        return false;
    }

    return true;
}

template<typename TReader>
bool Deserialize(TReader& reader, ::CsProtocol::IntService& value, bool isBase)
{
    if (!reader.ReadStructBegin(isBase)) {
        return false;
    }

    uint8_t type;
    uint16_t id;
    for (;;) {
        if (!reader.ReadFieldBegin(type, id)) {
            return false;
        }

        if (type == BT_STOP || type == BT_STOP_BASE) {
            if (isBase != (type == BT_STOP_BASE)) {
                return false;
            }
            break;
        }

        switch (id) {
            case 1: {
                if (!reader.ReadString(value.fullEnvName)) {
                    return false;
                }
                break;
            }

            case 2: {
                if (!reader.ReadString(value.location)) {
                    return false;
                }
                break;
            }

            case 3: {
                if (!reader.ReadString(value.environment)) {
                    return false;
                }
                break;
            }

            case 4: {
                if (!reader.ReadString(value.deploymentUnit)) {
                    return false;
                }
                break;
            }

            case 5: {
                if (!reader.ReadString(value.name)) {
                    return false;
                }
                break;
            }

            default:
                return false;
        }

        if (!reader.ReadFieldEnd()) {
            return false;
        }
    }

    if (!reader.ReadStructEnd(isBase)) {
        return false;
    }

    return true;
}

template<typename TReader>
bool Deserialize(TReader& reader, ::CsProtocol::Web& value, bool isBase)
{
    if (!reader.ReadStructBegin(isBase)) {
        return false;
    }

    uint8_t type;
    uint16_t id;
    for (;;) {
        if (!reader.ReadFieldBegin(type, id)) {
            return false;
        }

        if (type == BT_STOP || type == BT_STOP_BASE) {
            if (isBase != (type == BT_STOP_BASE)) {
                return false;
            }
            break;
        }

        switch (id) {
            case 10: {
                if (!reader.ReadString(value.browser)) {
                    return false;
                }
                break;
            }

            case 20: {
                if (!reader.ReadString(value.browserVer)) {
                    return false;
                }
                break;
            }

            case 30: {
                if (!reader.ReadString(value.screenRes)) {
                    return false;
                }
                break;
            }

            case 40: {
                if (!reader.ReadString(value.domain)) {
                    return false;
                }
                break;
            }

            case 50: {
                if (!reader.ReadBool(value.userConsent)) {
                    return false;
                }
                break;
            }

            case 60: {
                if (!reader.ReadString(value.browserLang)) {
                    return false;
                }
                break;
            }

            case 70: {
                if (!reader.ReadBool(value.isManual)) {
                    return false;
                }
                break;
            }

            default:
                return false;
        }

        if (!reader.ReadFieldEnd()) {
            return false;
        }
    }

    if (!reader.ReadStructEnd(isBase)) {
        return false;
    }

    return true;
}

template<typename TReader>
bool Deserialize(TReader& reader, ::CsProtocol::PII& value, bool isBase)
{
    if (!reader.ReadStructBegin(isBase)) {
        return false;
    }

    uint8_t type;
    uint16_t id;
    for (;;) {
        if (!reader.ReadFieldBegin(type, id)) {
            return false;
        }

        if (type == BT_STOP || type == BT_STOP_BASE) {
            if (isBase != (type == BT_STOP_BASE)) {
                return false;
            }
            break;
        }

        switch (id) {
            case 1: {
                static_assert(sizeof(value.Kind) == 4, "Invalid size of enum");
                int32_t item4;
                if (!reader.ReadInt32(item4)) {
                    return false;
                }
                value.Kind = static_cast< ::CsProtocol::PIIKind>(item4);
                break;
            }

            default:
                return false;
        }

        if (!reader.ReadFieldEnd()) {
            return false;
        }
    }

    if (!reader.ReadStructEnd(isBase)) {
        return false;
    }

    return true;
}

template<typename TReader>
bool Deserialize(TReader& reader, ::CsProtocol::CustomerContent& value, bool isBase)
{
    if (!reader.ReadStructBegin(isBase)) {
        return false;
    }

    uint8_t type;
    uint16_t id;
    for (;;) {
        if (!reader.ReadFieldBegin(type, id)) {
            return false;
        }

        if (type == BT_STOP || type == BT_STOP_BASE) {
            if (isBase != (type == BT_STOP_BASE)) {
                return false;
            }
            break;
        }

        switch (id) {
            case 1: {
                static_assert(sizeof(value.Kind) == 4, "Invalid size of enum");
                int32_t item4;
                if (!reader.ReadInt32(item4)) {
                    return false;
                }
                value.Kind = static_cast< ::CsProtocol::CustomerContentKind>(item4);
                break;
            }

            default:
                return false;
        }

        if (!reader.ReadFieldEnd()) {
            return false;
        }
    }

    if (!reader.ReadStructEnd(isBase)) {
        return false;
    }

    return true;
}

template<typename TReader>
bool Deserialize(TReader& reader, ::CsProtocol::Attributes& value, bool isBase)
{
    if (!reader.ReadStructBegin(isBase)) {
        return false;
    }

    uint8_t type;
    uint16_t id;
    for (;;) {
        if (!reader.ReadFieldBegin(type, id)) {
            return false;
        }

        if (type == BT_STOP || type == BT_STOP_BASE) {
            if (isBase != (type == BT_STOP_BASE)) {
                return false;
            }
            break;
        }

        switch (id) {
            case 1: {
                uint32_t size4;
                uint8_t type4;
                if (!reader.ReadContainerBegin(size4, type4)) {
                    return false;
                }
                if (type4 != BT_STRUCT) {
                    return false;
                }
                value.pii.resize(size4);
                for (unsigned i4 = 0; i4 < size4; i4++) {
                    if (!Deserialize(reader, value.pii[i4], false)) {
                        return false;
                    }
                }
                if (!reader.ReadContainerEnd()) {
                    return false;
                }
                break;
            }

            case 2: {
                uint32_t size4;
                uint8_t type4;
                if (!reader.ReadContainerBegin(size4, type4)) {
                    return false;
                }
                if (type4 != BT_STRUCT) {
                    return false;
                }
                value.customerContent.resize(size4);
                for (unsigned i4 = 0; i4 < size4; i4++) {
                    if (!Deserialize(reader, value.customerContent[i4], false)) {
                        return false;
                    }
                }
                if (!reader.ReadContainerEnd()) {
                    return false;
                }
                break;
            }

            default:
                return false;
        }

        if (!reader.ReadFieldEnd()) {
            return false;
        }
    }

    if (!reader.ReadStructEnd(isBase)) {
        return false;
    }

    return true;
}

template<typename TReader>
bool Deserialize(TReader& reader, ::CsProtocol::Value& value, bool isBase)
{
    if (!reader.ReadStructBegin(isBase)) {
        return false;
    }

    uint8_t type;
    uint16_t id;
    for (;;) {
        if (!reader.ReadFieldBegin(type, id)) {
            return false;
        }

        if (type == BT_STOP || type == BT_STOP_BASE) {
            if (isBase != (type == BT_STOP_BASE)) {
                return false;
            }
            break;
        }

        switch (id) {
            case 1: {
                static_assert(sizeof(value.type) == 4, "Invalid size of enum");
                int32_t item4;
                if (!reader.ReadInt32(item4)) {
                    return false;
                }
                value.type = static_cast< ::CsProtocol::ValueKind>(item4);
                break;
            }

            case 2: {
                uint32_t size4;
                uint8_t type4;
                if (!reader.ReadContainerBegin(size4, type4)) {
                    return false;
                }
                if (type4 != BT_STRUCT) {
                    return false;
                }
                value.attributes.resize(size4);
                for (unsigned i4 = 0; i4 < size4; i4++) {
                    if (!Deserialize(reader, value.attributes[i4], false)) {
                        return false;
                    }
                }
                if (!reader.ReadContainerEnd()) {
                    return false;
                }
                break;
            }

            case 3: {
                if (!reader.ReadString(value.stringValue)) {
                    return false;
                }
                break;
            }

            case 4: {
                if (!reader.ReadInt64(value.longValue)) {
                    return false;
                }
                break;
            }

            case 5: {
                if (!reader.ReadDouble(value.doubleValue)) {
                    return false;
                }
                break;
            }

            case 6: {
                uint32_t size4;
                uint8_t type4;
                if (!reader.ReadContainerBegin(size4, type4)) {
                    return false;
                }
                if (type4 != BT_LIST) {
                    return false;
                }
                value.guidValue.resize(size4);
                for (unsigned i4 = 0; i4 < size4; i4++) {
                    uint32_t size5;
                    uint8_t type5;
                    if (!reader.ReadContainerBegin(size5, type5)) {
                        return false;
                    }
                    if (type5 != BT_UINT8) {
                        return false;
                    }
                    value.guidValue[i4].resize(size5);
                    for (unsigned i5 = 0; i5 < size5; i5++) {
                        if (!reader.ReadUInt8(value.guidValue[i4][i5])) {
                            return false;
                        }
                    }
                    if (!reader.ReadContainerEnd()) {
                        return false;
                    }
                }
                if (!reader.ReadContainerEnd()) {
                    return false;
                }
                break;
            }

            case 10: {
                uint32_t size4;
                uint8_t type4;
                if (!reader.ReadContainerBegin(size4, type4)) {
                    return false;
                }
                if (type4 != BT_LIST) {
                    return false;
                }
                value.stringArray.resize(size4);
                for (unsigned i4 = 0; i4 < size4; i4++) {
                    uint32_t size5;
                    uint8_t type5;
                    if (!reader.ReadContainerBegin(size5, type5)) {
                        return false;
                    }
                    if (type5 != BT_STRING) {
                        return false;
                    }
                    value.stringArray[i4].resize(size5);
                    for (unsigned i5 = 0; i5 < size5; i5++) {
                        if (!reader.ReadString(value.stringArray[i4][i5])) {
                            return false;
                        }
                    }
                    if (!reader.ReadContainerEnd()) {
                        return false;
                    }
                }
                if (!reader.ReadContainerEnd()) {
                    return false;
                }
                break;
            }

            case 11: {
                uint32_t size4;
                uint8_t type4;
                if (!reader.ReadContainerBegin(size4, type4)) {
                    return false;
                }
                if (type4 != BT_LIST) {
                    return false;
                }
                value.longArray.resize(size4);
                for (unsigned i4 = 0; i4 < size4; i4++) {
                    uint32_t size5;
                    uint8_t type5;
                    if (!reader.ReadContainerBegin(size5, type5)) {
                        return false;
                    }
                    if (type5 != BT_INT64) {
                        return false;
                    }
                    value.longArray[i4].resize(size5);
                    for (unsigned i5 = 0; i5 < size5; i5++) {
                        if (!reader.ReadInt64(value.longArray[i4][i5])) {
                            return false;
                        }
                    }
                    if (!reader.ReadContainerEnd()) {
                        return false;
                    }
                }
                if (!reader.ReadContainerEnd()) {
                    return false;
                }
                break;
            }

            case 12: {
                uint32_t size4;
                uint8_t type4;
                if (!reader.ReadContainerBegin(size4, type4)) {
                    return false;
                }
                if (type4 != BT_LIST) {
                    return false;
                }
                value.doubleArray.resize(size4);
                for (unsigned i4 = 0; i4 < size4; i4++) {
                    uint32_t size5;
                    uint8_t type5;
                    if (!reader.ReadContainerBegin(size5, type5)) {
                        return false;
                    }
                    if (type5 != BT_DOUBLE) {
                        return false;
                    }
                    value.doubleArray[i4].resize(size5);
                    for (unsigned i5 = 0; i5 < size5; i5++) {
                        if (!reader.ReadDouble(value.doubleArray[i4][i5])) {
                            return false;
                        }
                    }
                    if (!reader.ReadContainerEnd()) {
                        return false;
                    }
                }
                if (!reader.ReadContainerEnd()) {
                    return false;
                }
                break;
            }

            case 13: {
                uint32_t size4;
                uint8_t type4;
                if (!reader.ReadContainerBegin(size4, type4)) {
                    return false;
                }
                if (type4 != BT_LIST) {
                    return false;
                }
                value.guidArray.resize(size4);
                for (unsigned i4 = 0; i4 < size4; i4++) {
                    uint32_t size5;
                    uint8_t type5;
                    if (!reader.ReadContainerBegin(size5, type5)) {
                        return false;
                    }
                    if (type5 != BT_LIST) {
                        return false;
                    }
                    value.guidArray[i4].resize(size5);
                    for (unsigned i5 = 0; i5 < size5; i5++) {
                        uint32_t size6;
                        uint8_t type6;
                        if (!reader.ReadContainerBegin(size6, type6)) {
                            return false;
                        }
                        if (type6 != BT_UINT8) {
                            return false;
                        }
                        value.guidArray[i4][i5].resize(size6);
                        for (unsigned i6 = 0; i6 < size6; i6++) {
                            if (!reader.ReadUInt8(value.guidArray[i4][i5][i6])) {
                                return false;
                            }
                        }
                        if (!reader.ReadContainerEnd()) {
                            return false;
                        }
                    }
                    if (!reader.ReadContainerEnd()) {
                        return false;
                    }
                }
                if (!reader.ReadContainerEnd()) {
                    return false;
                }
                break;
            }

            default:
                return false;
        }

        if (!reader.ReadFieldEnd()) {
            return false;
        }
    }

    if (!reader.ReadStructEnd(isBase)) {
        return false;
    }

    return true;
}

template<typename TReader>
bool Deserialize(TReader& reader, ::CsProtocol::Data& value, bool isBase)
{
    if (!reader.ReadStructBegin(isBase)) {
        return false;
    }

    uint8_t type;
    uint16_t id;
    for (;;) {
        if (!reader.ReadFieldBegin(type, id)) {
            return false;
        }

        if (type == BT_STOP || type == BT_STOP_BASE) {
            if (isBase != (type == BT_STOP_BASE)) {
                return false;
            }
            break;
        }

        switch (id) {
            case 1: {
                uint32_t size4;
                uint8_t keyType4, valueType4;
                if (!reader.ReadMapContainerBegin(size4, keyType4, valueType4)) {
                    return false;
                }
                if (keyType4 != BT_STRING || valueType4 != BT_STRUCT) {
                    return false;
                }
                for (unsigned i4 = 0; i4 < size4; i4++) {
                    std::string key4;
                    if (!reader.ReadString(key4)) {
                        return false;
                    }
                    if (!Deserialize(reader, value.properties[key4], false)) {
                        return false;
                    }
                }
                if (!reader.ReadContainerEnd()) {
                    return false;
                }
                break;
            }

            default:
                return false;
        }

        if (!reader.ReadFieldEnd()) {
            return false;
        }
    }

    if (!reader.ReadStructEnd(isBase)) {
        return false;
    }

    return true;
}

template<typename TReader>
bool Deserialize(TReader& reader, ::CsProtocol::Record& value, bool isBase)
{
    if (!reader.ReadStructBegin(isBase)) {
        return false;
    }

    uint8_t type;
    uint16_t id;
    for (;;) {
        if (!reader.ReadFieldBegin(type, id)) {
            return false;
        }

        if (type == BT_STOP || type == BT_STOP_BASE) {
            if (isBase != (type == BT_STOP_BASE)) {
                return false;
            }
            break;
        }

        switch (id) {
            case 1: {
                if (!reader.ReadString(value.ver)) {
                    return false;
                }
                break;
            }

            case 2: {
                if (!reader.ReadString(value.name)) {
                    return false;
                }
                break;
            }

            case 3: {
                if (!reader.ReadInt64(value.time)) {
                    return false;
                }
                break;
            }

            case 4: {
                if (!reader.ReadDouble(value.popSample)) {
                    return false;
                }
                break;
            }

            case 5: {
                if (!reader.ReadString(value.iKey)) {
                    return false;
                }
                break;
            }

            case 6: {
                if (!reader.ReadInt64(value.flags)) {
                    return false;
                }
                break;
            }

            case 7: {
                if (!reader.ReadString(value.cV)) {
                    return false;
                }
                break;
            }

            case 20: {
                uint32_t size4;
                uint8_t type4;
                if (!reader.ReadContainerBegin(size4, type4)) {
                    return false;
                }
                if (type4 != BT_STRUCT) {
                    return false;
                }
                value.extIngest.resize(size4);
                for (unsigned i4 = 0; i4 < size4; i4++) {
                    if (!Deserialize(reader, value.extIngest[i4], false)) {
                        return false;
                    }
                }
                if (!reader.ReadContainerEnd()) {
                    return false;
                }
                break;
            }

            case 21: {
                uint32_t size4;
                uint8_t type4;
                if (!reader.ReadContainerBegin(size4, type4)) {
                    return false;
                }
                if (type4 != BT_STRUCT) {
                    return false;
                }
                value.extProtocol.resize(size4);
                for (unsigned i4 = 0; i4 < size4; i4++) {
                    if (!Deserialize(reader, value.extProtocol[i4], false)) {
                        return false;
                    }
                }
                if (!reader.ReadContainerEnd()) {
                    return false;
                }
                break;
            }

            case 22: {
                uint32_t size4;
                uint8_t type4;
                if (!reader.ReadContainerBegin(size4, type4)) {
                    return false;
                }
                if (type4 != BT_STRUCT) {
                    return false;
                }
                value.extUser.resize(size4);
                for (unsigned i4 = 0; i4 < size4; i4++) {
                    if (!Deserialize(reader, value.extUser[i4], false)) {
                        return false;
                    }
                }
                if (!reader.ReadContainerEnd()) {
                    return false;
                }
                break;
            }

            case 23: {
                uint32_t size4;
                uint8_t type4;
                if (!reader.ReadContainerBegin(size4, type4)) {
                    return false;
                }
                if (type4 != BT_STRUCT) {
                    return false;
                }
                value.extDevice.resize(size4);
                for (unsigned i4 = 0; i4 < size4; i4++) {
                    if (!Deserialize(reader, value.extDevice[i4], false)) {
                        return false;
                    }
                }
                if (!reader.ReadContainerEnd()) {
                    return false;
                }
                break;
            }

            case 24: {
                uint32_t size4;
                uint8_t type4;
                if (!reader.ReadContainerBegin(size4, type4)) {
                    return false;
                }
                if (type4 != BT_STRUCT) {
                    return false;
                }
                value.extOs.resize(size4);
                for (unsigned i4 = 0; i4 < size4; i4++) {
                    if (!Deserialize(reader, value.extOs[i4], false)) {
                        return false;
                    }
                }
                if (!reader.ReadContainerEnd()) {
                    return false;
                }
                break;
            }

            case 25: {
                uint32_t size4;
                uint8_t type4;
                if (!reader.ReadContainerBegin(size4, type4)) {
                    return false;
                }
                if (type4 != BT_STRUCT) {
                    return false;
                }
                value.extApp.resize(size4);
                for (unsigned i4 = 0; i4 < size4; i4++) {
                    if (!Deserialize(reader, value.extApp[i4], false)) {
                        return false;
                    }
                }
                if (!reader.ReadContainerEnd()) {
                    return false;
                }
                break;
            }

            case 26: {
                uint32_t size4;
                uint8_t type4;
                if (!reader.ReadContainerBegin(size4, type4)) {
                    return false;
                }
                if (type4 != BT_STRUCT) {
                    return false;
                }
                value.extUtc.resize(size4);
                for (unsigned i4 = 0; i4 < size4; i4++) {
                    if (!Deserialize(reader, value.extUtc[i4], false)) {
                        return false;
                    }
                }
                if (!reader.ReadContainerEnd()) {
                    return false;
                }
                break;
            }

            case 27: {
                uint32_t size4;
                uint8_t type4;
                if (!reader.ReadContainerBegin(size4, type4)) {
                    return false;
                }
                if (type4 != BT_STRUCT) {
                    return false;
                }
                value.extXbl.resize(size4);
                for (unsigned i4 = 0; i4 < size4; i4++) {
                    if (!Deserialize(reader, value.extXbl[i4], false)) {
                        return false;
                    }
                }
                if (!reader.ReadContainerEnd()) {
                    return false;
                }
                break;
            }

            case 28: {
                uint32_t size4;
                uint8_t type4;
                if (!reader.ReadContainerBegin(size4, type4)) {
                    return false;
                }
                if (type4 != BT_STRUCT) {
                    return false;
                }
                value.extJavascript.resize(size4);
                for (unsigned i4 = 0; i4 < size4; i4++) {
                    if (!Deserialize(reader, value.extJavascript[i4], false)) {
                        return false;
                    }
                }
                if (!reader.ReadContainerEnd()) {
                    return false;
                }
                break;
            }

            case 29: {
                uint32_t size4;
                uint8_t type4;
                if (!reader.ReadContainerBegin(size4, type4)) {
                    return false;
                }
                if (type4 != BT_STRUCT) {
                    return false;
                }
                value.extReceipts.resize(size4);
                for (unsigned i4 = 0; i4 < size4; i4++) {
                    if (!Deserialize(reader, value.extReceipts[i4], false)) {
                        return false;
                    }
                }
                if (!reader.ReadContainerEnd()) {
                    return false;
                }
                break;
            }

            case 31: {
                uint32_t size4;
                uint8_t type4;
                if (!reader.ReadContainerBegin(size4, type4)) {
                    return false;
                }
                if (type4 != BT_STRUCT) {
                    return false;
                }
                value.extNet.resize(size4);
                for (unsigned i4 = 0; i4 < size4; i4++) {
                    if (!Deserialize(reader, value.extNet[i4], false)) {
                        return false;
                    }
                }
                if (!reader.ReadContainerEnd()) {
                    return false;
                }
                break;
            }

            case 32: {
                uint32_t size4;
                uint8_t type4;
                if (!reader.ReadContainerBegin(size4, type4)) {
                    return false;
                }
                if (type4 != BT_STRUCT) {
                    return false;
                }
                value.extSdk.resize(size4);
                for (unsigned i4 = 0; i4 < size4; i4++) {
                    if (!Deserialize(reader, value.extSdk[i4], false)) {
                        return false;
                    }
                }
                if (!reader.ReadContainerEnd()) {
                    return false;
                }
                break;
            }

            case 33: {
                uint32_t size4;
                uint8_t type4;
                if (!reader.ReadContainerBegin(size4, type4)) {
                    return false;
                }
                if (type4 != BT_STRUCT) {
                    return false;
                }
                value.extLoc.resize(size4);
                for (unsigned i4 = 0; i4 < size4; i4++) {
                    if (!Deserialize(reader, value.extLoc[i4], false)) {
                        return false;
                    }
                }
                if (!reader.ReadContainerEnd()) {
                    return false;
                }
                break;
            }

            case 34: {
                uint32_t size4;
                uint8_t type4;
                if (!reader.ReadContainerBegin(size4, type4)) {
                    return false;
                }
                if (type4 != BT_STRUCT) {
                    return false;
                }
                value.extCloud.resize(size4);
                for (unsigned i4 = 0; i4 < size4; i4++) {
                    if (!Deserialize(reader, value.extCloud[i4], false)) {
                        return false;
                    }
                }
                if (!reader.ReadContainerEnd()) {
                    return false;
                }
                break;
            }

            case 35: {
                uint32_t size4;
                uint8_t type4;
                if (!reader.ReadContainerBegin(size4, type4)) {
                    return false;
                }
                if (type4 != BT_STRUCT) {
                    return false;
                }
                value.extService.resize(size4);
                for (unsigned i4 = 0; i4 < size4; i4++) {
                    if (!Deserialize(reader, value.extService[i4], false)) {
                        return false;
                    }
                }
                if (!reader.ReadContainerEnd()) {
                    return false;
                }
                break;
            }

            case 36: {
                uint32_t size4;
                uint8_t type4;
                if (!reader.ReadContainerBegin(size4, type4)) {
                    return false;
                }
                if (type4 != BT_STRUCT) {
                    return false;
                }
                value.extCs.resize(size4);
                for (unsigned i4 = 0; i4 < size4; i4++) {
                    if (!Deserialize(reader, value.extCs[i4], false)) {
                        return false;
                    }
                }
                if (!reader.ReadContainerEnd()) {
                    return false;
                }
                break;
            }

            case 37: {
                uint32_t size4;
                uint8_t type4;
                if (!reader.ReadContainerBegin(size4, type4)) {
                    return false;
                }
                if (type4 != BT_STRUCT) {
                    return false;
                }
                value.extM365a.resize(size4);
                for (unsigned i4 = 0; i4 < size4; i4++) {
                    if (!Deserialize(reader, value.extM365a[i4], false)) {
                        return false;
                    }
                }
                if (!reader.ReadContainerEnd()) {
                    return false;
                }
                break;
            }

            case 41: {
                uint32_t size4;
                uint8_t type4;
                if (!reader.ReadContainerBegin(size4, type4)) {
                    return false;
                }
                if (type4 != BT_STRUCT) {
                    return false;
                }
                value.ext.resize(size4);
                for (unsigned i4 = 0; i4 < size4; i4++) {
                    if (!Deserialize(reader, value.ext[i4], false)) {
                        return false;
                    }
                }
                if (!reader.ReadContainerEnd()) {
                    return false;
                }
                break;
            }

            case 42: {
                uint32_t size4;
                uint8_t type4;
                if (!reader.ReadContainerBegin(size4, type4)) {
                    return false;
                }
                if (type4 != BT_STRUCT) {
                    return false;
                }
                value.extMscv.resize(size4);
                for (unsigned i4 = 0; i4 < size4; i4++) {
                    if (!Deserialize(reader, value.extMscv[i4], false)) {
                        return false;
                    }
                }
                if (!reader.ReadContainerEnd()) {
                    return false;
                }
                break;
            }

            case 43: {
                uint32_t size4;
                uint8_t type4;
                if (!reader.ReadContainerBegin(size4, type4)) {
                    return false;
                }
                if (type4 != BT_STRUCT) {
                    return false;
                }
                value.extIntWeb.resize(size4);
                for (unsigned i4 = 0; i4 < size4; i4++) {
                    if (!Deserialize(reader, value.extIntWeb[i4], false)) {
                        return false;
                    }
                }
                if (!reader.ReadContainerEnd()) {
                    return false;
                }
                break;
            }

            case 44: {
                uint32_t size4;
                uint8_t type4;
                if (!reader.ReadContainerBegin(size4, type4)) {
                    return false;
                }
                if (type4 != BT_STRUCT) {
                    return false;
                }
                value.extIntService.resize(size4);
                for (unsigned i4 = 0; i4 < size4; i4++) {
                    if (!Deserialize(reader, value.extIntService[i4], false)) {
                        return false;
                    }
                }
                if (!reader.ReadContainerEnd()) {
                    return false;
                }
                break;
            }

            case 45: {
                uint32_t size4;
                uint8_t type4;
                if (!reader.ReadContainerBegin(size4, type4)) {
                    return false;
                }
                if (type4 != BT_STRUCT) {
                    return false;
                }
                value.extWeb.resize(size4);
                for (unsigned i4 = 0; i4 < size4; i4++) {
                    if (!Deserialize(reader, value.extWeb[i4], false)) {
                        return false;
                    }
                }
                if (!reader.ReadContainerEnd()) {
                    return false;
                }
                break;
            }

            case 51: {
                uint32_t size4;
                uint8_t keyType4, valueType4;
                if (!reader.ReadMapContainerBegin(size4, keyType4, valueType4)) {
                    return false;
                }
                if (keyType4 != BT_STRING || valueType4 != BT_STRING) {
                    return false;
                }
                for (unsigned i4 = 0; i4 < size4; i4++) {
                    std::string key4;
                    if (!reader.ReadString(key4)) {
                        return false;
                    }
                    if (!reader.ReadString(value.tags[key4])) {
                        return false;
                    }
                }
                if (!reader.ReadContainerEnd()) {
                    return false;
                }
                break;
            }

            case 60: {
                if (!reader.ReadString(value.baseType)) {
                    return false;
                }
                break;
            }

            case 61: {
                uint32_t size4;
                uint8_t type4;
                if (!reader.ReadContainerBegin(size4, type4)) {
                    return false;
                }
                if (type4 != BT_STRUCT) {
                    return false;
                }
                value.baseData.resize(size4);
                for (unsigned i4 = 0; i4 < size4; i4++) {
                    if (!Deserialize(reader, value.baseData[i4], false)) {
                        return false;
                    }
                }
                if (!reader.ReadContainerEnd()) {
                    return false;
                }
                break;
            }

            case 70: {
                uint32_t size4;
                uint8_t type4;
                if (!reader.ReadContainerBegin(size4, type4)) {
                    return false;
                }
                if (type4 != BT_STRUCT) {
                    return false;
                }
                value.data.resize(size4);
                for (unsigned i4 = 0; i4 < size4; i4++) {
                    if (!Deserialize(reader, value.data[i4], false)) {
                        return false;
                    }
                }
                if (!reader.ReadContainerEnd()) {
                    return false;
                }
                break;
            }

            default:
                return false;
        }

        if (!reader.ReadFieldEnd()) {
            return false;
        }
    }

    if (!reader.ReadStructEnd(isBase)) {
        return false;
    }

    return true;
}

} // namespace bond_lite
