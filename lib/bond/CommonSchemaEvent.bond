namespace Microsoft.OneDs.Models.CommonSchema.Bond

// TODO(pawelc): should all/most of the int fields be nullable? Is it ok to use 0 as null?
// We are assuming the extension structs map 1:1 between JSON and bond

[Description("Describes the fields added dynamically by the service. Clients should NOT use this section since it is adding dynamically by the service.")]
struct Ingest
{
    // This is the time at which the service received the event. Format: A date/time in UTC as the C# DateTime.Ticks value
    [Name("IngestDateTime")]
    1: required int64 time;

    // This is the remote IP address that we received the event from.
    [Name("ClientIp")]
    2: required string clientIp;

    // A bitfield indicating what the service was able to determine
    // about the security of the event.
    [Name("DataAuthorization")]
    3: optional int64 auth;

    // A bitfield indicating what the service was able to determine
    // about the quality of the event. Details on https://osgwiki.com/wiki/Vortex/EventQuality.
    [Name("DataQuality")]
    4: optional int64 quality;

    // This is the client-side time just before it uploaded the event. Clients should not set this directly, but instead upload the value as the UploadTime http header.
    [Name("UploadDateTime")]
    5: optional int64 uploadTime;

    // This is the value of the User-Agent http header seen by the service that received the event. http://en.wikipedia.org/wiki/User_agent
    [Name("UserAgent")]
    6: optional string userAgent = nothing;

    // The identified client name. Usually this is populated with the subject name if the request is authenticated with a client certificate.
    // See https://osgwiki.com/wiki/Vortex/ClientProtocol#Https_certificate_auth_support
    [Name("Client")]
    7: optional string client = nothing;

    // Nested Ingest Extension.
    // If the event already had an ingest extension and the client was authenticated as First Party (eg. Asimov Connector),
    // the ingest extension will be inserted as processedIngest.
    8: optional nullable<bonded<Ingest>> processedIngest;
}

[Description("Describes the User related fields. See https://osgwiki.com/wiki/CommonSchema/user_id")]
struct User
{
    [Description("Unique user Id. Clients aren't expected to set this; instead the service will decide the best ID to use here. Clients may set this if they believe they have the best user ID already. Format is <NamespaceIdentifier>:<Id> for example, x:12345678.")]
    1: optional string id = nothing;

    [Description("Local user identifier according to the client. Format is <NamespaceIdentifier>:<Id> for example, x:12345678.")]
    2: optional string localId = nothing;

    [Description("This is the ID of the user associated with this event, deduced from a token such as an MSA ticket or Xbox xtoken.")]
    [Name("UserAuthId")]
    3: optional string authId = nothing;

    [Description("Language and region (IETF language tag)")]
    4: optional string locale = nothing;
}

[Description("Describes the location")]
struct Location
{
    [Description("Unique identification for location.")]
    1: optional string id = nothing;

    [Description("Country for location.")]
    2: optional string country = nothing;

    [Description("Request Timezone.")]
    3: optional string tz = nothing;
}

[Description("Describes the device related fields. See https://osgwiki.com/wiki/CommonSchema/device_id")]
struct Device
{
    [Description("Unique device Id. Clients aren't expected to set this; instead the service will decide the best ID to use here. Clients may set this if they believe they have the best device ID already. Format is <NamespaceIdentifier>:<Id> for example, x:12345678.")]
    1: optional string id = nothing;

    [Description("Local device identifier according to the client. Format is <NamespaceIdentifier>:<Id> for example, x:12345678.")]
    2: optional string localId = nothing;

    [Description("This is the ID of the device associated with this event, deduced from a token such as an MSA ticket or Xbox xtoken. For MSA tickets this is expected to be the MSA Global ID.")]
    [Name("DeviceAuthID")]
    3: optional string authId = nothing;

    [Description("This is the secondary ID of the device associated with this event, deduced from a token such as an MSA ticket or Xbox xtoken. For MSA tickets this is expected to be the MSA Hardware ID.")]
    [Name("DeviceAuthSecondID")]
    4: optional string authSecId = nothing;

    [Description("Platform of the device. Not to be confused with the Windows concept of device class which is different; Windows calls this Platform. See the Windows function RtlConvertPlatformInfoToString.  Legitimate values are: Windows.Universal, Windows.Windows8x, Windows.WindowsPhone8x, Windows.Desktop, Windows.Mobile, Windows.Xbox, Windows.PPI, Windows.IOT, Windows.IoTHeadless, Windows.Server, Windows.Analog, Windows.XBoxSRA, Windows.XBoxERA.")]
    5: optional string deviceClass = nothing;

    [Description("Organization ID associated with the event.")]
    6: optional string orgId = nothing;

    [Description("ID used to authenticate the orgId.")]
    7: optional string orgAuthId = nothing;

	[Description("Device Make")]
    8: optional string make = nothing;

	[Description("Device Model.")]
    9: optional string model = nothing;

    [Description("Device ID used by enterprises (e.g. AAD device ID).")]
    10: optional string authIdEnt = nothing;
}

[Description("Describes the OS properties that would be populated by the client.")]
struct Os
{
    [Description("OS locale, set by the user, in the Windows locale format. Example, en-US for US English. Refer RFC 4646 for the format.")]
    1: optional string locale = nothing;

    [Description("Comma delimited list of experiment ids for experiments installed on the OS. Format is <NamespaceIdentifier>:<ExperimentId> for example, m:12345.")]
    2: optional string expId = nothing;

    [Description("Boot ID. A unique value for a boot session on a device since the last OS installation.")]
    3: optional int32 bootId;

    [Description("Name of the OS")]
    4: optional string name = nothing;

    [Description("Version of the OS")]
    5: optional string ver = nothing;
}

[Description("Describes the properties of the running application. This extension could be populated by a client app or a web app.")]
struct App
{
    [Description("Comma delimited list of experiment ids for experiments installed on the Application. Format is <NamespaceIdentifier>:<ExperimentId> for example, m:12345.")]
    1: optional string expId = nothing;

    [Description("The userId as known by the application")]
    2: optional string userId = nothing;

    [Description("The environment the application is running in such as int, ppe or production. This value is populated by the application not the logging libraries.")]
    3: optional string env = nothing;

    [Description("App Session ID. A unique value for an app session on a device within a particular os.bootId value.")]
    4: optional int32 asId = nothing;

    [Description("Unique identifier of the client application currently loaded in the process producing the event; used to group events together and understand usage pattern, errors by application.")]
    5: optional string id = nothing;

    [Description("App version. The version number of the application specified in ClientAppId. Used to understand errors by Version, Usage by Version across an App.")]
    6: optional string ver = nothing;

    [Description("Language and region (IETF language tag)")]
    7: optional string locale = nothing;

    [Description("Name the client application")]
    8: optional string name = nothing;

	[Description("Identifier to mark session. Unless overriden, a session cookie will be used to set this value based on 30 min inactivity")]
    9: optional string sesId = nothing;
}

[Description("Describes the properties that might be populated by a logging library on Windows.")]
struct Utc
{
    [Description("Used for UTC scenarios.")]
    1: optional string stId = nothing;

    [Description("Activity Id in ETW (event tracing for windows).")]
    2: optional string aId = nothing;

    [Description("Related Activity Id in ETW.")]
    3: optional string raId = nothing;

    [Description("Op Code in ETW.")]
    4: optional string op = nothing;

    [Description("Categories.")]
    5: optional int64 cat;

    [Description("This captures the characteristics of the traffic. Examples: isTest, isInternal.")]
    6: optional int64 flags;

    [Description("The Windows SQM device ID.")]
    7: optional string sqmId = nothing;

    [Description("Combined UTC monitor and event sequence numbers in format <monitor sequence>:<event sequence>")]
    9: optional string mon = nothing;

    [Description("Shell Composer ID")]
    10: optional int32 cpId;

    [Description("Upload buffer sequence number in the format <buffer identifier>:<sequence number>")]
    11: optional string bSeq = nothing;

    // See "https://microsoft.sharepoint.com/teams/CommonSchema/Shared Documents/Schema Specs/SequenceField_PartA_CS2.0.docx?web=1"
    [Description("ID used to help distinguish events in the sequence by indicating the current boot session.")]
    12: optional string epoch = nothing;

    // See "https://microsoft.sharepoint.com/teams/CommonSchema/Shared Documents/Schema Specs/SequenceField_PartA_CS2.0.docx?web=1"
    [Description("Sequence field used to track absolute order of uploaded events.")]
    13: optional int64 seq;

    // cs4.0 fields
    14: optional double popSample;

    15: optional int64 eventFlags;

	// WCOS fields
    16: optional int64 wsId;

    17: optional int64 wcmp;

    18: optional int64 wPId;
}

[Description("")]
struct M365a
{
    [Description("")]
    1: optional string enrolledTenantId = nothing;

    [Description("EDP program enrollment bitfield, as computed by the server.")]
    2: optional uint64 msp = nothing;
}

[Description("Describes the XBox-Live related fields. Typically these are sourced from an XAuth supporting token, but may come from a client. Data consumers should check the ingest.auth field to tell the difference; see https://osgwiki.com/wiki/Vortex/EventAuth.")]
[Version("1.1")]
struct Xbl
{
    [Description("Any additional claims whose short claim name hasn't been added to this structure.")]
    5: optional map<string, string> claims = nothing;

    [Description("The earliest time the token is valid, as derived from the JWT 'nbf' claim.")]
    10: optional string nbf = nothing;

    [Description("The time the supporting token expires, as derived from the JWT 'exp' claim.")]
    20: optional string exp = nothing;

    [Description("Xbox sandboxId. If the XToken does not have this claim, then the field is omitted.")]
    30: optional string sbx = nothing;

    [Description("XBox device type.")]
    40: optional string dty = nothing;

    [Description("Xbox Live Device ID.")]
    50: optional string did = nothing;

    [Description("A list of base10-encoded Xbox User IDs, prefixed with 'x:' (xuid) or 's:' (sponsored/guest) for each user.")]
    60: optional string xid = nothing;

    [Description("Is at least one of the supplied users an internal or external test account? This is a bit field, with two bits assigned to each XUID starting from the first XUID and the least significant digit of 'uts'.  If all users are retail accounts, this field is omitted.")]
    70: optional uint64 uts;

    [Description("Comma separated list of Passport User IDs.")]
    80: optional string pid = nothing;

    [Description("The version of the OS on the device.")]
    90: optional string dvr = nothing;

    [Description("The Xbox Live TitleID.")]
    100: optional uint32 tid = nothing;

    [Description("Version of the Xbox Live TitleID.")]
    110: optional string tvr = nothing;

    [Description("The service type.")]
    120: optional string sty = nothing;

    [Description("The service instance id.")]
    130: optional string sid = nothing;

    [Description("The unique id representing the developer entity.")]
    140: optional int64 eid = nothing;

    [Description("IPv4 or IPv6 address of the client.")]
    150: string ip = nothing;
}

[Description("Describes the fields related to the javascript logging library implementation.")]
[Version("1.0")]
struct Javascript
{
    [Description("Logging Library version.")]
    10: optional string libVer;

    [Description("Operating system name. Platform & version from Devicelookup service.  Eg: windows 7, windows 10, windows 8.1, macintosh, windows console 10.0, windows 8, ios 9.3, android 6.0, windows xp, android 5.1, x11, windows vista, windows phone 8.0, android 4.4, android 5.0, others, windows phone 10.0, linux, windows phone 8.1, ios, ios 10.0, android 4.2, ios 9.2, android 4.1, ios 7.1, Server 2003; XP x64 Edition")]
    15: optional string osName;

    [Description("Web browser name. Browser name from Devicelookup service.  Eg: chrome, ie, edge, firefox, edge, safari, chrome, opera")]
    20: optional string browser;

    [Description("Web browser version. Browser majorVersion from Devicelookup service.  Others, 11, 14, 48, 13, 9, etc.")]
    21: optional string browserVersion;

    [Description("DeviceClass from Devicelookup service.  Eg: Smartphone, Tablet, PC, Game Console, etc.")]
    25: optional string platform;

    [Description("DeviceManufacturer from Devicelookup service.  Eg: PC, Microsoft, Apple, Nokia, HTC, etc")]
    30: optional string make;

    [Description("DeviceModel from Devicelookup service.  Eg: PC, iPad, Lumia 532, Android, etc.")]
    35: optional string model;

    [Description("Screensize of the device. Width x Height")]
    40: optional string screenSize;

	[Description("Identifies the unique browser instance.  This is the first party cookie value copied over from the MC1 cookie to circumvent the '3rd party cookie disabled' case.")]
    45: optional string msfpc;

    [Description("Identifies the unique browser instance.  Extracted from the 'MC1' cookie.")]
    50: optional string mc1Id;

    [Description("Posix DateTime when the MC1 cookie was created.")]
    60: optional uint64 mc1Lu;

    [Description("Set to 'true' if this event is the first to use the supplied mc1Id.")]
    70: optional bool isMc1New;

    [Description("MS0 Session ID.")]
    80: optional string ms0;

    [Description("ANON - MSA Anonymous ID.")]
    90: optional string anid;

    [Description("A - allows Wedcs consumers to connect users with RIO campaign data.")]
    100: optional string a;

    [Description("msresearch - allows Wedcs consumers to connect with Comscore Survey data.")]
    110: optional string msResearch;

    [Description("csrvc - Comscore Survey userID.")]
    120: optional string csrvc;

    [Description("RioTracking.CellCode - contains the RIO campaign outbound tracking code.")]
    130: optional string rtCell;

    [Description("RioTracking.EndActionCode - contains the RIO campaign inbound tracking code.")]
    140: optional string rtEndAction;

    [Description("RioTracking.PermId.ClientSide - contains the Exact Target User ID.")]
    150: optional string rtPermId;

    [Description("R - Rio tracking cookie.")]
    160: optional string r;

    [Description("Wt_fpc - connects to Webtrends user ID.")]
    170: optional string wtFpc;

    [Description("Omniid - connects to Omniture user ID.")]
    180: optional string omniId;

    [Description("Gsfxsessioncookie - used to connect with legacy clickstream system at Microsoft.")]
    190: optional string gsfxSession;

    [Description("Host part of the pageUrl that fires this event.  Eg: www.microsoft.com, asimov-xpert")]
    200: optional string domain;

	[Description("Describes whether the user has given consent for Cookies. See https://microsoft.sharepoint.com/teams/celaeucookie")]
    210: required bool userConsent;

	[Description("Language with highest quality score from http header accept-language")]
    220: optional string browserLang;

    [Description("Service name(s) identifier, semi-colon delimited list")]
	230: optional string serviceName;

    [Description("Value of the 'Do Not Track' HTTP header.  It is '1' if the user is opt-out, '0' if opt-in, and omitted if no preference is set.")]
    999: optional string dnt;
}


[Description("This is internal for the client-server protocol. Data from this section is not visible to customers.")]
struct Protocol
{
    [Description("Crc of key partA fields.")]
    1: optional int32 metadataCrc;

    [Description("A list of strings that refers back to one or more keys in the Tickets http header that the client uploaded along with a batch of events")]
    2: optional nullable<vector<string>> ticketKeys = nothing;

    [Description("Device Make")]
    3: optional string devMake = nothing;

    [Description("Device Model.")]
    4: optional string devModel = nothing;

    [Description("EDP program enrollment bitfield, as set by the client.")]
    5: optional uint64 msp = nothing;
}


[Description("Describes the fields related to the receipts extension, added by the service.")]
struct Receipts
{
    [Description("Original time - Original event time (if clock skew correction applied)")]
    1: optional int64 originalTime;

    [Description("Client-side upload time")]
    2: optional int64 uploadTime;

    [Description("Original Event Name (if the event name is changed)")]
    3: optional string originalName = nothing;

    [Description("Server-detected event properties not relevant to auth or event quality")]
    4: optional uint64 flags = 0;
}

[Description("Network properties.")]
struct Net
{
    [Description("Network Provider.")]
    1: optional string provider = nothing;

    [Description("Network Cost.")]
    2: optional string cost = nothing;

    [Description("Network Type.")]
    3: optional string type = nothing;
}


[Description("SDK properties.")]
struct Sdk
{
    [Description("SDK version.")]
    1: optional string ver = nothing;

    [Description("SDK epoch.")]
    2: optional string epoch = nothing;

    [Description("SDK seq.")]
    3: optional int64 seq = nothing;

    [Description("ID created on first-time SDK initialization")]
    4: optional string installId = nothing;

	[Description("SDK Lib version.")]
    5: optional string libVer = nothing;

}

[Description("Cloud service related properties.")]
struct Cloud
{
    1: optional string fullEnvName = nothing;

    2: optional string location = nothing;

    3: optional string environment = nothing;

    4: optional string deploymentUnit = nothing;

    5: optional string name = nothing;

    6: optional string roleInstance = nothing;

    7: optional string role = nothing;
}

struct Service
{
    1: optional string name = nothing;

    2: optional string role = nothing;

    3: optional string roleVersion = nothing;
}

[Description("CommonSchema Extension")]
struct Cs
{
    1: optional string sig = nothing;
}

// CS4.0 Extensions 
[Description("Correlation Vector: A single field for tracking partial order of related telemetry events across component boundaries")]
struct Mscv
{
    1: optional string cV = nothing;
}

[Description("Describes the Microsoft internal fields related to the javascript logging library implementation for CS4.0.")]
struct IntWeb
{
    [Description("Identifies the unique browser instance.  Extracted from the 'MC1' cookie.")]
    1: optional string mc1Id = nothing;

    [Description("Identifies the unique browser instance.  This is the first party cookie value copied over from the MC1 cookie to circumvent the '3rd party cookie disabled' case.")]
    2: optional string msfpc = nothing;

    [Description("ANON - MSA Anonymous ID.")]
    3: optional string anid = nothing;

    [Description("ANON - MSA Anonymous ID.")]
    4: optional string serviceName = nothing;

    [Description("ANON - MSA Anonymous ID.")]
    5: optional map<string, string> mscom = nothing;
}

[Description("Cloud service related properties 4.0 extension.")]
struct IntService
{
    1: optional string fullEnvName = nothing;

    2: optional string location = nothing;

    3: optional string environment = nothing;

    4: optional string deploymentUnit = nothing;

    5: optional string name = nothing;
}

// Same as Javascript extension in CS3.0
[Description("Describes the fields related to the javascript logging library implementation for CS4.0.")]
[Version("1.0")]
struct Web
{
    [Description("Web browser name. Browser name from Devicelookup service.  Eg: chrome, ie, edge, firefox, edge, safari, chrome, opera")]
    10: optional string browser = nothing;

    [Description("Web browser version. Browser majorVersion from Devicelookup service.  Others, 11, 14, 48, 13, 9, etc.")]
    20: optional string browserVer = nothing;

    [Description("Screensize of the device. Width x Height")]
    30: optional string screenRes = nothing;

    [Description("Host part of the pageUrl that fires this event.  Eg: www.microsoft.com, asimov-xpert")]
    40: optional string domain = nothing;

    [Description("Describes whether the user has given consent for Cookies. See https://microsoft.sharepoint.com/teams/celaeucookie")]
    50: required bool userConsent;

    [Description("Language with highest quality score from http header accept-language")]
    60: optional string browserLang = nothing;

	[Description("true if event was explicitly logged")]
    70: optional bool isManual;
}

enum ValueKind
{
    ValueInt64 = 0,
    ValueUInt64 = 1,
    ValueInt32 = 2,
    ValueUInt32 = 3,
    ValueDouble = 4,
    ValueString = 5,
    ValueBool = 6,
    ValueDateTime = 7,
    ValueGuid = 8,
    ValueArrayInt64 = 9,
    ValueArrayUInt64 = 10,
    ValueArrayInt32 = 11,
    ValueArrayUInt32 = 12,
    ValueArrayDouble = 13,
    ValueArrayString = 14,
    ValueArrayBool = 15,
    ValueArrayDateTime = 16,
    ValueArrayGuid = 17
}

enum PIIKind
{
    NotSet = 0,
    DistinguishedName = 1,
    GenericData = 2,
    IPV4Address = 3,
    IPv6Address = 4,
    MailSubject = 5,
    PhoneNumber = 6,
    QueryString = 7,
    SipAddress = 8,
    SmtpAddress = 9,
    Identity = 10,
    Uri = 11,
    Fqdn = 12,
    IPV4AddressLegacy = 13
}

struct PII
{
    // Specifies what type of PII is being sent.
    1: optional PIIKind Kind = NotSet;
}

enum CustomerContentKind
{
    NotSet = 0,
    GenericContent = 1
}

struct CustomerContent
{
    // Customer content type
    1: optional CustomerContentKind Kind = NotSet;
}

struct Attributes
{
    1: optional nullable<PII> pii;
    2: optional nullable<CustomerContent> customerContent;
}

struct Value
{
    1: optional ValueKind type = ValueString;
    2: optional nullable<Attributes> attributes;
    3: optional string stringValue = nothing;
    4: optional int64 longValue; // all integer types, data time, bool is represented here
    5: optional double doubleValue;
    6: optional nullable<vector<uint8>> guidValue;
    10: optional nullable<vector<string>> stringArray;
    11: optional nullable<vector<int64>> longArray; // all vectors of integer types, data time, bool are represented here
    12: optional nullable<vector<double>> doubleArray;
    13: optional nullable<vector<vector<uint8>>> guidArray;
}

struct Data
{
    // Key-Value map. It represents nested structs in flattened form (dot-delimited).
    1: optional map<string, Value> properties;
}

// It represents CS 3.0 event.
struct CsEvent
{
    // Required field for the version of the schema. The format is a string with major and minor such as 3.0.
    1: required string ver;

    // event name
    2: required string name;

    // The time on the client when this event was created. Format: A date/time in UTC as the C# DateTime.Ticks value
    3: required int64 time;

    4: optional double popSample = 100.0;

    // This is a structured iKey (https://osgwiki.com/wiki/Structured_iKey) used
    // to enable isolation of applications sharing the same telemetry events.
    5: optional string iKey = nothing;

    // A collection of values bit-packed to represent how the event was processed
    6: optional int64 flags;

    7: optional string cV = nothing;

    //////////////////////////////////////////////////////////////////////////////////////

    20: optional nullable<Ingest> extIngest;

    21: optional nullable<Protocol> extProtocol;

    22: optional nullable<User> extUser;

    23: optional nullable<Device> extDevice;

    24: optional nullable<Os> extOs;

    25: optional nullable<App> extApp;

    26: optional nullable<Utc> extUtc;

    27: optional nullable<Xbl> extXbl;

    28: optional nullable<Javascript> extJavascript;

    29: optional nullable<Receipts> extReceipts;

    31: optional nullable<Net> extNet;

    32: optional nullable<Sdk> extSdk;

    33: optional nullable<Location> extLocation;

    34: optional nullable<Cloud> extCloud;

    35: optional nullable<Service> extService;

    36: optional nullable<Cs> extCs;

    37: optional nullable<M365a> extM365a;

    //////////////////////////////////////////////////////////////////////////////////////

    // other (not so common) extensions
    41: optional nullable<bonded<Data>> ext;

    // CS4.0 extensions
    42: optional nullable<Mscv> extMscv;

    43: optional nullable<IntWeb> extIntWeb;

    44: optional nullable<IntService> extIntService;

    45: optional nullable<Web> extWeb;

    // Header / identity extensions for semi-managed extensions use
    // Keys in this space must be namespaced.
    51: optional map<string, string> tags;

    // part B
    60: optional string baseType = nothing;
    61: optional nullable<bonded<Data>> baseData;

    // part C
    70: nullable<bonded<Data>> data;
};
