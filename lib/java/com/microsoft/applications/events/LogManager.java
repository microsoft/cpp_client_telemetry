package com.microsoft.applications.events;

public class LogManager {
    private LogManager() {};

    private static native long initalizeWithoutTenantToken();

    public static ILogger initialize(){
        return new ILogger(initalizeWithoutTenantToken());
    }

    private static native long initializeWithTenantToken(String tenantToken);

    public static ILogger initialize(String tenantToken) {
        return new ILogger(initializeWithTenantToken(tenantToken));
    }

    public static native int flushAndTeardown();
    public static native int uploadNow();
    public static native int flush();
    public static native int pauseTransmission();
    public static native int resumeTransmission();

    private static native int setIntTransmitProfile(int profile);

    /**
     * Sets transmit profile for event transmission to one of the built-in profiles.
     * A transmit profile is a collection of hardware and system settings (like network connectivity, power state)
     * based on which to determine how events are to be transmitted.
     * @param profile
     * @return native value of status_t
     */
    public static int setTransmitProfile(TransmitProfile profile) {
        return setIntTransmitProfile(profile.getValue());
    }

    /**
     * Sets transmit profile for event transmission.
     * A transmit profile is a collection of hardware and system settings (like network connectivity, power state)
     * based on which to determine how events are to be transmitted.
     * @param profile
     * @return native value of status_t
     */
    public static native int setTransmitProfile(String profile);

    /**
     * Load transmit profiles from JSON config
     * @param profiles_json
     * @return native value of status_t
     */
    public static native int loadTransmitProfiles(String profiles_json);

    /**
     * Reset transmission profiles to default settings
     * @return native value of status_t
     */
    public static native int resetTransmitProfiles();

    /**
     * @return Transmit profile name based on built-in profile enum
     */
    public static native String getTransmitProfileName();

    private static native long nativeGetSemanticContext();
    /// <summary>
    /// </summary>
    /// <returns>ISemanticContext interface pointer</returns>

    /**
     * Retrieve an ISemanticContext interface through which to specify context information
     * such as device, system, hardware and user information.
     * Context information set via this API will apply to all logger instance unless they
     * are overwritten by individual logger instance.
     * @return ISemanticContext
     */
    public static ISemanticContext getSemanticContext() {
        return new ISemanticContext(nativeGetSemanticContext());
    }

    private static native int nativeSetContext(String name, String value, int piiKind);

    /**
     *  Adds or overrides a property of the custom context for the telemetry logging system.
     *  Context information set here applies to events generated by all ILogger instances
     *  unless it is overwritten on a particular ILogger instance.
     *  PiiKind_None is chosen by default.
     * @param name Name of the context property
     * @param value Value of the context property
     * @return native value of status_t
     */
    public static int setContext(final String name, final String value) {
        return setContext(name, value, PiiKind.PiiKind_None);
    }

    /**
     *  Adds or overrides a property of the custom context for the telemetry logging system.
     *  Context information set here applies to events generated by all ILogger instances
     *  unless it is overwritten on a particular ILogger instance.
     * @param name Name of the context property
     * @param value Value of the context property
     * @param piiKind PIIKind of the context
     * @return native value of status_t
     */
    public static int setContext(final String name, final String value, PiiKind piiKind) {
        if (name == null || name.trim().isEmpty())
            throw new IllegalArgumentException("name is null or empty");
        if (value == null || value.trim().isEmpty())
            throw new IllegalArgumentException("value is null or empty");
        if (piiKind == null)
            throw new IllegalArgumentException("piiKind is null");

        return nativeSetContext(name, value, piiKind.getValue());
    }


    private static native int nativeGetLogger();

    /**
     * Retrieves the ILogger interface of a Logger instance through which to log telemetry event.
     * @return Instance of ILogger
     */
    public static ILogger GetLogger() {
        return new ILogger(nativeGetLogger());
    }

    private static native int nativeGetLoggerWithSource(String source);

    /**
     * Retrieves the ILogger interface of a Logger instance through which to log telemetry event.
     * @param source Source name of events sent by this logger instance
     * @return Instance of ILogger
     */
    public static ILogger GetLogger(final String source) {
        return new ILogger(nativeGetLoggerWithSource(source));
    }

    private static native int nativeGetLoggerWithTenantTokenAndSource(String tenantToken, String source);

    /**
     * Retrieves the ILogger interface of a Logger instance through which to log telemetry event.
     * @param tenantToken Token of the tenant with which the application is associated for collecting telemetry
     * @param source Source name of events sent by this logger instance
     * @return Instance of ILogger
     */
    public static ILogger GetLogger(final String tenantToken, final String source) {
        return new ILogger(nativeGetLoggerWithTenantTokenAndSource(tenantToken, source));
    }
}
